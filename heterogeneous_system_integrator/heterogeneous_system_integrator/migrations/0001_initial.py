# Generated by Django 4.2 on 2024-04-15 15:51

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ApiPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('endpoint', models.CharField(help_text='API Endpoint where to apply the requests')),
                ('path_to_results_list', models.CharField(blank=True, help_text='Path to the results list from where to get data. Separate field names using dots (.)', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('db', 'Database'), ('ftp', 'FTP / FTPS / SFTP'), ('rest', 'API REST')])),
                ('hostname', models.CharField(help_text='www.host_site.com or 192.168.0.1')),
                ('port', models.IntegerField(blank=True, help_text='5432', null=True)),
                ('username', models.CharField(blank=True, null=True)),
                ('password', models.CharField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Conversion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('field_name', models.CharField(help_text='The field name which value is subject of comparison')),
                ('comparison_operator', models.CharField(choices=[('contains', 'Contains'), ('==', 'Equal'), ('>', 'Greater than'), ('>=', 'Greater than or equal to'), ('in', 'In'), ('<', 'Less than'), ('<=', 'Less than or equal to'), ('ncontains', 'Not contains'), ('!=', 'Not equal'), ('nin', 'Not in')])),
                ('comparison_value', models.CharField(help_text='The value that is going to be compared with')),
                ('conversion_value', models.CharField(help_text='The new value that is going to receive the field when the conditions are met')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DbPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Database name')),
                ('schema', models.CharField(help_text='Schema name')),
                ('table', models.CharField(help_text='Table name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('field_name', models.CharField(help_text='The field name which value is subject of comparison')),
                ('comparison_operator', models.CharField(choices=[('contains', 'Contains'), ('==', 'Equal'), ('>', 'Greater than'), ('>=', 'Greater than or equal to'), ('in', 'In'), ('<', 'Less than'), ('<=', 'Less than or equal to'), ('ncontains', 'Not contains'), ('!=', 'Not equal'), ('nin', 'Not in')])),
                ('comparison_value', models.CharField(help_text='The value that is going to be compared with')),
                ('type', models.CharField(choices=[('keep', 'Keep'), ('discard', 'Discard')], help_text='Filter behaviour with data when conditions are met')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FtpPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('path_to_files', models.CharField(help_text='Path to the folder where the transfering file process is going to take place. Separate field names using slashes (/)')),
                ('filename_or_regex_pattern', models.CharField(blank=True, help_text='Filename or regular expression for multiple files from where to get data', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Mapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('origin_field_name', models.CharField(blank=True, help_text='Source field name from where to extract the value. Incompatible with "Constant value"', null=True)),
                ('constant_value', models.CharField(blank=True, help_text='Source constant value. Incompatible with "Origin field name"', null=True)),
                ('destination_field_name', models.CharField(help_text='Target field name where the value is going to be stored')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransformStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('conversion', models.ManyToManyField(blank=True, help_text='Conversions to modify the field values that are going to be uploaded', null=True, related_name='transform_steps', to='heterogeneous_system_integrator.conversion')),
                ('mappings', models.ManyToManyField(help_text='Mappings to choose which data fields are going to be uploaded and from which origin', related_name='transform_steps', to='heterogeneous_system_integrator.mapping')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransferStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('connection', models.ForeignKey(help_text='Connection where the transfering data process is going to take place', on_delete=django.db.models.deletion.PROTECT, related_name='transfer_steps', to='heterogeneous_system_integrator.connection')),
                ('filter', models.ForeignKey(blank=True, help_text='Filter to select the data that is going to be transfered', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transfer_steps', to='heterogeneous_system_integrator.filter')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subtask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('download_steps', models.ManyToManyField(help_text='Steps that download data', related_name='subtasks_download', to='heterogeneous_system_integrator.transferstep')),
                ('transform_step', models.ForeignKey(blank=True, help_text='Step that transforms data to the configured format', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subtasks', to='heterogeneous_system_integrator.transformstep')),
                ('upload_step', models.ForeignKey(help_text='Step that uploads data', on_delete=django.db.models.deletion.PROTECT, related_name='subtasks_upload', to='heterogeneous_system_integrator.transferstep')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlannedTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('execute_at', models.DateTimeField(help_text='Date and time when the task is going to be executed')),
                ('subtasks', models.ManyToManyField(help_text='Subtasks that are going to be executed', related_name='planned_tasks', to='heterogeneous_system_integrator.subtask')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PeriodicTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('period', models.CharField(help_text='Please use the following format: Minute[0-59] Hour[0-23] Day[1-31] Month[1-12] Week[0-6](0=Sunday).            Syntax guide: Use a space to separate each field, use a comma to separate multiple values, use a hyphen to designate a range of values and use an asterisk as a wildcard to include all possible values.            Example: 30 12 * * 0,6 (all saturday and sunday at 12:30)')),
                ('stop_at', models.DateTimeField(blank=True, help_text='From that point on the task is not going to be executed anymore and is goint to be deleted', null=True)),
                ('subtasks', models.ManyToManyField(help_text='Subtasks that are going to be executed', related_name='periodic_tasks', to='heterogeneous_system_integrator.subtask')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AsyncTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subtasks', models.ManyToManyField(help_text='Subtasks that are going to be executed', related_name='tasks', to='heterogeneous_system_integrator.subtask')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
